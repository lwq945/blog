## XSS攻击
XSS：英文全称（Cross-site scripting），即跨站脚本，是注入攻击的一种。

**特点：**
不对服务器端造成任何危害，而是通过一些正常的站内交互途径，例如发布评论，提交含有 JavaScript 的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，
作为内容渲染到了页面上，其他用户访问这个页面的时候就会运行这些脚本。恶意的脚本将会收集所有访问这个评论区的用户的cookie以便执行只有目标用户才有权限做的事情。
XSS防御：
1. 所有用户输入的地方都不安全（用户输入总是不可信任的）
2. 所有展示用户输入的地方都不安全
对用户输入内容进行转义和过滤，将 "<"," >" 这些特殊字符转义成HTML实体字符
3. js 里不要用 eval（把字符串当成js去执行，在全局环境下）
4. 不要用 innerHTML
不要拼接html（innerHTML），尽量使用text方法，如果一定要使用 HTML，就把可疑符号变成 HTML 实体。
5. 现代模板引擎和MVVM框架往往都自带防御XSS攻击的模板写法（自带了方便快捷的转义方式）。



CSRF
CSRF (Cross Site Request Forgery)，跨站请求伪造。通过 XSS 来实现的 CSRF 称为 XSRF。
其原理是攻击者构造网站后台某个功能接口的请求地址，诱导用户去点击或者用特殊方法让该请求地址自动加载。用户在登录状态下这个请求被服务端接收后会被误以为是用户合法的操作。对于 GET 形式的接口地址可轻易被攻击，对于 POST 形式的接口地址也不是百分百安全，攻击者可诱导用户进入带 Form 表单可用POST方式提交参数的页面。
CSRF防御：

对要修改数据的请求使用POST请求，GET 请求应该只浏览而不改变服务器端资源
通过 referer、token 或者 验证码 来检测用户提交。
1.referer，是判断请求的源，如果请求的源不是来自本站，就拒绝访问，但有缺陷。
2.token ，服务器端要以某种策略生成随机字符串，作为令牌（token），保存在 Session 里。然后在发出请求的页面，把该令牌以隐藏域一类的形式，与其他信息一并发出。在接收请求的页面，把接收到的信息中的令牌与 Session 中的令牌比较，只有一致的时候才处理请求，否则返回 HTTP 403 拒绝请求或者要求用户重新登录验证身份。及时清除用户的无效cookie
